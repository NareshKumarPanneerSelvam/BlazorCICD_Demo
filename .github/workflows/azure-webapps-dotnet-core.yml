name: Build and deploy Blazor App
# use this 'on' to trigger the workflow
on:
  push: 
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest  
    steps: # steps - series of tasks to run the job
      - uses: actions/checkout@v2
      - name: Set up .NET Core
        uses: actions/setup-dotnet@v1
        with: # Use latest version of dotnet 6
          dotnet-version: '6.0.x'
          include-prerelease: true
       
      - name: Build with dotnet
        run: dotnet build --configuration Release

      - name: dotnet publish# run the command to pack the build files and dependencies into folder for deployment
        run: dotnet publish -c Release -o ${{env.DOTNET_ROOT}}/myapp

      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v2

        with:
          name: .net-app
          path: ${{env.DOTNET_ROOT}}/myapp

  deploy:
    runs-on: windows-latest
    needs: build 
    environment:
      name: 'Production'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}

    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v2
        with:
          name: .net-app

      - name: Deploy to Azure Web App
        id: deploy-to-webapp 
        uses: azure/webapps-deploy@v2
        with: 
          app-name: 'syncdevoebas'
          slot-name: 'Production'
          publish-profile: ${{ secrets.azureWebAppPublishProfile }}
          package: .

  delete-artifact:
    runs-on: windows-latest
    needs: deploy
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: .net-app

      - name: Delete artifact
        uses: actions/github-script@v4
        with:
            github-token: ${{ secrets.GITHUB_TOKEN }}
            script: |
              const artifactId = ${{ steps.download-artifact.outputs.artifact_id }};
              const github = require('@actions/github');
              const octokit = new github.GitHub(context.repo.token);
              await octokit.actions.deleteArtifact({
                owner: context.repo.owner,
                repo: context.repo.repo,
                artifact_id: artifactId
              });
